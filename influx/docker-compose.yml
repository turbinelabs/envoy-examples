version: '2'
services:
  # Define a Telegraf service
  telegraf:
    image: telegraf:1.4.0
    volumes:
      - ./etc/telegraf-statsd.conf:/etc/telegraf/telegraf.conf:ro
    links:
      - influxdb
    ports:
      - "8092:8092/udp"
      - "8094:8094"
      - "8125:8125/udp"
    networks:
      envoymesh:
        aliases:
          - telegraf
        ipv4_address: 10.0.0.100

  # Define an InfluxDB service
  influxdb:
    image: influxdb:1.3.5
    volumes:
      - ./data/influxdb:/var/lib/influxdb
    ports:
      - "8086:8086"
    networks:
      envoymesh:
        aliases:
          - influxdb
  # Define a Chronograf service
  chronograf:
    image: chronograf:1.3.8
    environment:
      INFLUXDB_URL: http://influxdb:8086
      KAPACITOR_URL: http://kapacitor:9092
    ports:
      - "8888:8888"
    links:
      - influxdb
      - kapacitor
    networks:
      envoymesh:
        aliases:
          - chronograf
  # Define a Kapacitor service
  kapacitor:
    image: kapacitor:1.3.3
    environment:
      KAPACITOR_HOSTNAME: kapacitor
      KAPACITOR_INFLUXDB_0_URLS_0: http://influxdb:8086
    links:
      - influxdb
    ports:
      - "9092:9092"
    networks:
      envoymesh:
        aliases:
          - kapacitor
  # Define a service for using the influx CLI tool.
  # docker-compose run influxdb-cli
  influxdb-cli:
    image: influxdb:1.3.5
    entrypoint:
      - influx
      - -host
      - influxdb
    links:
      - influxdb
    networks:
      - envoymesh
  # Define a service for using the kapacitor CLI tool.
  # docker-compose run kapacitor-cli
  kapacitor-cli:
    image: kapacitor:1.3.3
    entrypoint: bash
    environment:
      KAPACITOR_URL: http://kapacitor:9092
    links:
      - kapacitor
    networks:
      - envoymesh
  front-envoy:
    build:
      context: ../
      dockerfile: front-proxy/Dockerfile-frontenvoy
    volumes:
      - ./front-envoy-zipkin.yaml:/etc/front-envoy.yaml
    networks:
      - envoymesh
    expose:
      - "80"
      - "8001"
    ports:
      - "8000:80"
      - "8001:8001"

  service1:
    build:
      context: ../front-proxy
      dockerfile: Dockerfile-service
    volumes:
      - ./service1-envoy-zipkin.yaml:/etc/service-envoy.yaml
    networks:
      envoymesh:
        aliases:
          - service1
    environment:
      - SERVICE_NAME=1
      - LATENCY=50
      - SUCCESS=95
    expose:
      - "80"
      - "8001"
    ports:
      - "8002:8001"

  service1a:
    build:
      context: ../front-proxy
      dockerfile: Dockerfile-service
    volumes:
      - ./service1-envoy-zipkin.yaml:/etc/service-envoy.yaml
    networks:
      envoymesh:
        aliases:
          - service1a
    environment:
      - SERVICE_NAME=1a
      - LATENCY=50
      - SUCCESS=95
    expose:
      - "80"

  service2:
    build:
      context: ../front-proxy
      dockerfile: Dockerfile-service
    volumes:
      - ./service2-envoy-zipkin.yaml:/etc/service-envoy.yaml
    networks:
      envoymesh:
        aliases:
          - service2
    environment:
      - SERVICE_NAME=2
      - LATENCY=50
      - SUCCESS=95
    expose:
      - "80"
      - "8001"
    ports:
      - "8003:8001"

  zipkin:
    image: openzipkin/zipkin
    networks:
      envoymesh:
        aliases:
          - zipkin
    expose:
      - "9411"
    ports:
      - "9411:9411"

networks:
  envoymesh:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.1/16
          gateway: 10.0.0.1
